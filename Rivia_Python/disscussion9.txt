1. Review coding tasks from discussion8.txt
2. Research & Practice datetime
3. ReWrite task14.py from discussion8.txt so that it only uses Python
   code and not subprocess to execute Linux commands such as find.
4. Create a UML diagram (no need to get super fancy) for your Black Jack game
   provided it was implemented in OOP.
5. Continue work on refactoring Black Jack game based on UML or Precedural diagram.
6. Review / Complete the text to voice program.
7. Research / Practice Pytest / Unittest
   - https://docs.pytest.org/en/latest/
8. Ensure you update your project code to github (Charles to provide repo)
   - feel free to upload a simple readme.md

---- Live Code Notes ----
"""
Author: Don Drummond
Description: A command line game of Blackjack
Date: 12 May 2020
todos:
- implement multiple players
- implement multiple decks
- implement exit
- possible refactoring- make a superclass to handle duplicated code from house/player class
- handles any win with 21 as a blackjack paying 1.5, fix so only initial draw
- game will break if deck run out of cards, fix this
"""
# import sys
import random

# Global values for each card
# Ace is treated as 11 as when it converts to 1 is
# handled in another area
DECK_VALUES = {
    'Ace of Hearts': 11, 'Ace of Diamonds': 11, 'Ace of Spades': 11, 'Ace of Clubs': 11,
    'King of Hearts': 10, 'King of Diamonds': 10, 'King of Spades': 10, 'King of Clubs': 10,
    'Queen of Hearts': 10, 'Queen of Diamonds': 10, 'Queen of Spades': 10, 'Queen of Clubs': 10,
    'Jack of Hearts': 10, 'Jack of Diamonds': 10, 'Jack of Spades': 10, 'Jack of Clubs': 10,
    '10 of Hearts': 10, '10 of Diamonds': 10, '10 of Spades': 10, '10 of Clubs': 10,
    '9 of Hearts': 9, '9 of Diamonds': 9, '9 of Spades': 9, '9 of Clubs': 9,
    '8 of Hearts': 8, '8 of Diamonds': 8, '8 of Spades': 8, '8 of Clubs': 8,
    '7 of Hearts': 7, '7 of Diamonds': 7, '7 of Spades': 7, '7 of Clubs': 7,
    '6 of Hearts': 6, '6 of Diamonds': 6, '6 of Spades': 6, '6 of Clubs': 6,
    '5 of Hearts': 5, '5 of Diamonds': 5, '5 of Spades': 5, '5 of Clubs': 5,
    '4 of Hearts': 4, '4 of Diamonds': 4, '4 of Spades': 4, '4 of Clubs': 4,
    '3 of Hearts': 3, '3 of Diamonds': 3, '3 of Spades': 3, '3 of Clubs': 3,
    '2 of Hearts': 2, '2 of Diamonds': 2, '2 of Spades': 2, '2 of Clubs': 2
}

# Create number of decks for the game
NUM_DECKS = 0


def generate_deck():
    """
    Function to create a random deck of cards
    :return: A list of 52 strings representing a deck of cards
    """
    deck = []
    cards = ["Ace", "King", "Queen", "Jack", "10", "9",
             "8", "7", "6", "5", "4", "3", "2"]
    for card in cards:
        deck.append(card + " of Hearts")
        deck.append(card + " of Diamonds")
        deck.append(card + " of Spades")
        deck.append(card + " of Clubs")

    random.shuffle(deck)
    return deck


# Global deck variable
GAME_DECK = generate_deck()


class Player:
    def __init__(self):
        self._bank = 1000
        self._hand = []
        self._hand_value = 0
        self._bet = 0
        self._aces_not_one = 0

    def create_bet(self, amount):
        """
        Creates a player's bet for a round, it is reset at the end of the round
        :param amount: Amount a player bets
        :return: None
        """
        self._bet = amount

    def add_card(self):
        """
        Adds a card to a player's hand, additionally increments
        aces_not_one to show how many current Aces are in the hand
        that are equal to 11
        :return: None
        """
        new_card = deal_card(GAME_DECK)
        if DECK_VALUES[new_card] == 11:
            self._aces_not_one += 1
        self._hand.append(new_card)
        self._hand_value += DECK_VALUES[new_card]

    def display_hand(self):
        """
        Prints a player's hand and current hand value to them
        :return: None
        """
        print("Your hand is: ")
        for card in self._hand:
            print(card)
        print("Your hand value is: ")
        print(self.get_hand_total())

    def reset_hand(self):
        """
        Resets a player's hand, hand_value, and bet
        :return: None
        """
        self._hand = []
        self._hand_value = 0
        self._bet = 0
        self._aces_not_one = 0

    def update_bank(self, win_condition, amount):
        """
        Updates a player's bank based on if they won a hand or not
        :param win_condition: True if a player won a hand, False if a player lost a hand
        :param amount: Amount won, handles 1.5 payout for blackjack
        :return: None
        """
        if win_condition:
            self._bank += amount
        else:
            self._bank -= amount

    def convert_ace_to_one(self):
        """
        Reduces a player's hand by 10 to convert an ace from
        value 11 to value 1
        :return: None
        """
        self._hand_value -= 10
        self._aces_not_one -= 1

    def get_bank(self):
        """
        Getter for player's bank
        :return: Player's bank
        """
        return self._bank

    def get_aces(self):
        """
        Getter for Aces that are not one
        :return: Player's aces that are not one
        """
        return self._aces_not_one

    def get_hand_total(self):
        """
        Getter for hand total
        :return: Player's hand total
        """
        return self._hand_value

    def get_bet(self):
        """
        Getter for bet total
        :return: Player's current bet
        """
        return self._bet

    def wager(self):
        while True:
            player_wager = raw_input("How much would you like to wager? ")
            try:
                player_wager = int(player_wager)
                if player_wager <= self._bank:
                    self._bet = player_wager
                    return True
                else:
                    print("You don't have enough coin..")
                    return False
            except:
                print("This isn't an positive integer, please enter a positive, whole number.")


class House:
    def __init__(self):
        self._hand = []
        self._hand_value = 0
        self._soft_hit = 17
        self._aces_not_one = 0

    def add_card(self):
        """
        Deals a card to the House's hand
        :return: None
        """
        new_card = deal_card(GAME_DECK)
        if DECK_VALUES[new_card] == 11:
            self._aces_not_one += 1
        self._hand.append(new_card)
        self._hand_value += DECK_VALUES[new_card]


    def display_hidden_hand(self):
        """
        Shows the 'face card' of the dealer
        :return: None
        """
        print("The dealer currently has " + self._hand[0] + " showing.")

    def get_hand_total(self):
        """
        Getter for hand total
        :return: Houses's hand total
        """
        return self._hand_value

    def convert_ace_to_one(self):
        """
        Reduces a player's hand by 10 to convert an ace from
        value 11 to value 1
        :return: None
        """
        self._hand_value -= 10
        self._aces_not_one -= 1

    def display_final_hand(self):
        """
        Prints Houses's final hand and current hand value to the user
        :return: None
        """
        print("House cards: ")
        for card in self._hand:
            print(card)
        print("House has: ")
        print(self.get_hand_total())

    def reset_hand(self):
        """
        Resets a player's hand, hand_value, and bet
        :return: None
        """
        self._hand = []
        self._hand_value = 0
        self._aces_not_one = 0

    def get_aces(self):
        """
        Getter for Aces that are not one
        :return: Player's aces that are not one
        """
        return self._aces_not_one


def welcome():
    """
    Intro to the user
    :return: None
    """
    print("Welcome to terminal Blackjack.")
    print("You start with 1000 coins, continue play until you run out of coins.")



def deal_card(deck):
    card = deck.pop()
    return card


def game_turn(player, house):
    """
    Game engine to play a turn
    :param player: Player Object
    :param house: House Object
    :return: None
    """
    print("Your current Bank is:")
    print(player.get_bank())
    if player.wager():
        # Generate House and Player starting cards
        house.add_card()
        player.add_card()
        house.add_card()
        player.add_card()
        while True:
            # Handle converting Aces from 11 to 1 in point value
            house.display_hidden_hand()
            player.display_hand()
            if player.get_hand_total() > 21:
                if player.get_aces() > 0:
                    player.convert_ace_to_one()
                else:
                    print("You busted!")
                    player.update_bank(False, player.get_bet())
                    player.reset_hand()
                    break
            elif player.get_hand_total() == 21:
                print("Winner Winner Chicken Dinner, you hit BLACKJACK!")
                player.update_bank(True, (player.get_bet() * 1.5))
                player.reset_hand()
                break

            response = raw_input("Would you like to hit y/n? ")
            if response == "y":
                player.add_card()
            elif response == "n":
                while house.get_hand_total() < 17:
                    house.add_card()
                print("\n")
                house.display_final_hand()
                if house.get_hand_total() > 21:
                    if house.get_aces() > 0:
                        house.convert_ace_to_one()
                        if house.get_hand_total() > 21:
                            print("House Busted!")
                            print("Player win!")
                            player.update_bank(True, player.get_bet())
                            player.reset_hand()
                            house.reset_hand()
                            break
                    else:
                        print("House Busted!")
                        print("Player win!")
                        player.update_bank(True, player.get_bet())
                        player.reset_hand()
                        house.reset_hand()
                        break
                elif house.get_hand_total() < player.get_hand_total():
                    print("Player win!")
                    player.update_bank(True, player.get_bet())
                    player.reset_hand()
                    house.reset_hand()
                    break
                else:
                    player.update_bank(False, player.get_bet())
                    print("Player loss.")
                    player.reset_hand()
                    house.reset_hand()
                    break
            else:
                print("You didn't follow directions, no hit for you.")
                # handle House getting cards
                pass
    else:
        player.wager()

    """
    Code to handle split/double down.. 
    if GAME_DECK[player._hand[0]] == GAME_DECK[player._hand[1]]:
        response = input("Would you like to split y/n? ")
        if response != "y" or response != "n":
            print("Not valid response, I'll take that as a no.")
        elif response == "y":
    """


def main():
    welcome()
    new_deck = generate_deck()
    player = Player()
    house = House()
    # run the game loop
    while player.get_bank() > 0:
        game_turn(player, house)
    print("Game Over!")


if __name__ == "__main__":
    main()


####################### Matt Blackjack #######################
import time
import random
import inquirer


def pause(n=1.5):
	time.sleep(n)
	
	
class Player:
	def __init__(self, is_dealer=False):
		self.type = 'dealer' if is_dealer else 'player'
		self.hand = Hand()

	def hit(self, card):
		self.hand.add_card(card)

	def hand_total(self):
		return self.hand.get_total()

	def show_hand(self, hole_card=False):
		total = self.hand.get_total()
		for n in range(len(self.hand.cards)):
			if self.type == 'dealer' and n == 0 and hole_card:
				print('{num}) {val}'.format(num=n, val='–'))
				continue

			val = self.hand.cards[n].value
			print('{num}) {val}'.format(num=n, val=val))

		if self.type == 'player' or not hole_card:
			print('Total: {total}'.format(total=total))

	def __str__(self):
		return 'Player Type: ' + self.type + '\n'

		
class Card:
    def __init__(self, value, suite):
        self.value = value
        self.suite = suite

    def __str__(self):
        return 'CARD – value: ' + self.value


class Deck:
    def __init__(self):
        self.card_values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        self.card_suites = ['spade', 'clover', 'diamond', 'heart']
        self.cards = [Card(value, suite) for value in self.card_values for suite in self.card_suites]

    def shuffle(self):
        random.shuffle(self.cards)

    def card(self):
        while self.cards:
            yield self.cards.pop()

    def __str__(self):
        return str(self.__dict__)


class Hand:
    def __init__(self):
        self.cards = []
        self.high_card_values = {'J': 10, 'Q': 10, 'K': 10}

    def add_card(self, card):
        self.cards.append(card)

    def get_total(self):
        total = 0
        aces = 0

        for card in self.cards:
            if card.value in self.high_card_values:
                total += self.high_card_values[card.value]
            elif card.value == 'A':
                aces += 1
            else:
                total += int(card.value)

        # Requires refactoring – we must find all permutations of Ace value sums
        ace_values = [1*aces, 11*aces]
        final_totals = [i + total for i in ace_values if i + total <= 21]

        if not final_totals:
            return min(ace_values) + total
        else:
            return max(final_totals)


class BlackJack:
    def __init__(self):
        self.deck = Deck()

        self.dealer = Player(True)
        self.player = Player()
        self.players = [self.dealer, self.player]

        self.turn = 1
        self.current_player = self.players[self.turn]

        self.player_choice = [
            inquirer.List(
                'player_choice',
                message="What's your move?",
                choices=["Hit", "Stand"]
            )
        ]

    def new_game(self):
        print('{:*^30}'.format(" Welcome to BlackJack! "))
        pause()
        self.deck.shuffle()
        self.deal(2)
        self.full_status()

    def deal(self, card_count=1):
        remaining = card_count

        while remaining > 0:
            for player in self.players:
                card = next(self.deck.card())
                player.hand.add_card(card)

            remaining -= 1

    def hit(self):
        card = next(self.deck.card())
        self.current_player.hand.add_card(card)
        return card

    def next_turn(self):
        self.turn += 1
        self.current_player = self.players[self.turn % 2]

    def ask_player_hit_or_stand(self):
        answer = inquirer.prompt(self.player_choice)

        return answer['player_choice'] == "Hit"

    def full_status(self):
        self.dealer_status()
        self.player_status()
        print('\n')

    def dealer_status(self):
        print('{:*^30}'.format(" Dealer's Hand "))
        self.dealer.show_hand(self.turn == 1)  # Dealer has hole card at beginning of game

    def player_status(self):
        print('{:*^30}'.format(" Player Hand "))
        self.player.show_hand()

    def results(self):
        print('{:-^30}'.format(" Game Results "))
        self.full_status()

        if self.dealer.hand_total() == self.player.hand_total():
            if len(self.dealer.hand.cards) <= len(self.player.hand.cards):
                print("Dealer wins! Better luck next time.")
            else:
                print("You win!")
        elif self.dealer.hand_total() > self.player.hand_total():
            print("Dealer wins! Better luck next time.")
        else:
            if self.player.hand_total() == 21:
                print('Winner winner chicken dinner!!!')
            else:
                print("You win!")

    def dealer_bust(self):
        self.dealer_status()
        print('Dealer busts! You win!')

    def player_bust(self):
        self.player_status()
        print('You bust! Better luck next time.')


def main():
    game = BlackJack()
    game.new_game()
    dealer_stand = False
    player_stand = False

    while True:
        if game.current_player.type == 'dealer' and not dealer_stand:
            print("Dealer's turn.")
            pause(1.5)

            if game.dealer.hand_total() < 17:
                card = game.hit()
                print("Dealer hits: {val}".format(val=card.value))
                pause()

                if game.dealer.hand_total() > 21:
                    game.dealer_bust()
                    break
                else:
                    game.dealer_status()
                    print('\n')
                    pause()
            else:
                print("Dealer stands.\n")
                dealer_stand = True
                pause(.8)

        elif not player_stand:
            print("Player's turn.")
            pause(.8)

            if game.ask_player_hit_or_stand():
                card = game.hit()
                print("Player hits: {val}".format(val=card.value))
                pause()

                if game.current_player.hand_total() > 21:
                    game.player_bust()
                    break
                else:
                    game.player_status()
                    print('\n')
                    pause()
            else:
                print("Player stands.\n")
                player_stand = True
                pause(.8)

        if player_stand and dealer_stand:
            game.results()
            break

        game.next_turn()


if __name__ == '__main__':
    main()





################## Polly Exercise Barney


import os
import subprocess
import sys

import boto3

# python3 polly.py "How now brown cow"
speech_text = sys.argv[1]
out_path = './speech.mp3'

polly_client = boto3.Session(profile_name="default").client('polly')

response = polly_client.synthesize_speech(VoiceId='Joanna',
                                          OutputFormat='mp3',
                                          Text=speech_text)

file = open(out_path, 'wb')
file.write(response['AudioStream'].read())
file.close()

# Play the audio using the platform's default player
if sys.platform == "win32":
    os.startfile(out_path)
else:
    # The following works on macOS and Linux. (Darwin = mac, xdg-open = linux).
    opener = "open" if sys.platform == "darwin" else "xdg-open"
    subprocess.call([opener, out_path])



############# Barney Find Exercise ################

import argparse
import subprocess


def main():
    parser = argparse.ArgumentParser(description='''Produce a friendly formatted output of files greater than the 
specified size and older than the specified age. ( Example: python3 file_lookup.py -p /home/pi -s +1M -a +1w )''')
    parser.add_argument('--directory_path', '-p', '-d', default=".", type=str,
                        help='location on the file system to analyze (default to current dir)')
    parser.add_argument('--file_size', '-s', type=str,
                        help='''file size or greater in bytes that the tool should look for.
Prefix quantity with modifier (-, +, or omit) for <, >, = respectively. 
k       kilobytes (1024 bytes)
M       megabytes (1024 kilobytes)
G       gigabytes (1024 megabytes)
T       terabytes (1024 gigabytes)
P       petabytes (1024 terabytes)''')
    parser.add_argument('--file_age', '-a', type=str,
                        help='''file age or greater in days that the tool should look for (default days). 
Prefix quantity with modifier (-, +, or omit) for <, >, = respectively.  
s       second
m       minute (60 seconds)
h       hour (60 minutes)
d       day (24 hours)
w       week (7 days)''')
    args = parser.parse_args()
    print(args)
    lookup(args)


def lookup(args):
    command = f"find {args.directory_path} -type f"
    if args.file_size is not None:
        command += f" -size {args.file_size}"
    if args.file_age is not None:
        command += f" -mtime {args.file_age}"

    subprocess.Popen(command.split())


if __name__ == "__main__":
    main()
    
    
    
### ADAM FIND EXERCISE ###

import subprocess
import os
import sys


def validate_arguments(argvs: int, validationamt=4) -> bool:
    """Validate we have all the required options."""
    if len(argvs) == validationamt:
        print(os.path.isdir(sys.argv[1]))
        if os.path.isfile(sys.argv[1]) == True:
            int(sys.argv[2])
            try:
                print(int(sys.argv[2]))
            except ValueError as e:
                print(f"Not a valid input for size. ERROR: {e}")
                return False
            try:
                int(sys.argv[3])
            except ValueError as e:
                print(f"Not a valid input for days. ERROR: {e}")
                return False
        elif os.path.isdir(sys.argv[1]) == False:
            print("ERROR: Invalid directory.")
            return False
        return True
    else:
        return False


def display_hints():
    """Remind user correct inputs to this application."""
    print('''\n
    First argument: directory path "/etc/services" \n
    Second argument: file size or greater in bytes "1000" \n
    Third argument: file age or greater in days to look for "7" \n''')


def analyze_directory(mydir: str, minsize: str, mindate: str) -> bytes:
    """ Output the directory and organize.ArithmeticError """
    try:
        myout = subprocess.run(["find","{}".format(mydir),"-mtime","+"+mindate,"-size","+"+minsize+"c","-ls"],capture_output=True)
        return myout.stdout
    except FileNotFoundError as e:
        print(f"There was an issue with the command syntax. ERROR: {e}")
    except TypeError as e:
        print(f"Use python 3.7+ ERROR: {e}")


def main():
    if validate_arguments(sys.argv) == True:
        print("Valid inputs. Processing your request!")
        mydir = analyze_directory(sys.argv[1],sys.argv[2],sys.argv[3])
        print(mydir)
    else:
        display_hints()


if __name__ == "__main__":
    main()


## camilo
#!/usr/bin/python
"""
Write a program that takes 3 command line arguments to produce
a friendly formatted output of files greater than the specified 
Size and older  than the specified age:
- directory_path -> location on the file system to analyze
- file_size -> file size or greater in bytes that the tool should look for
- file_age -> file age or greater in days that the tool should look for

Example to run it:
python3 task_list_files2.py "/Users/camcif/Documents/Python/Training" 1100 "2020-5-10"
"""




import os
import sys
import datetime

def main():

    if len(sys.argv) > 3:
        system_path = (sys.argv[1])
        file_size = int(sys.argv[2])
        file_age = (sys.argv[3])   
        searching_files(system_path, file_size,file_age) 
    else:
        sys.exit("ERROR: you did not enter all the arguments.")

def searching_files(system_path: str, file_size: int, file_age: str):
    files_in_system_path = os.listdir(system_path) # returns list with files names
    for n in files_in_system_path:
        file_path = os.path.join(system_path, n)
        file_info = os.stat(file_path) # retrive information about a file, size, path, ..
        file_ctime_formated = datetime.datetime.fromtimestamp(file_info.st_ctime).strftime('%Y-%m-%d')
        # if file_ctime_formated <= file_age: # Files older than the user entry. Format is yy-mm-dd
        if file_info.st_size >= file_size and file_ctime_formated <= file_age:
            print(f"File {n} is {file_info.st_size} and last time changed/created on {file_ctime_formated}")

if __name__ == '__main__':
    main()
    
## Camilo
"""
Write a program that takes the text you have provided and returns and audio
file in the language specified. Have the code ask The user if they would 
like to play the file. Use AWS service for this excercise.
"""

import boto3
from botocore.exceptions import BotoCoreError, ClientError
from contextlib import closing
import os
import sys
import subprocess
from tempfile import gettempdir

def main():
    user_text = input("Please enter the text you want to listen: ")
    user_language = input("Please enter the E: English or S: Spanish: ").lower()
    print(f"here is the language {user_language}")

    if user_language == "e":
        user_voice = "Joanna"
        print(user_language)
        language_code = "en-US" 
        play_text(user_text,language_code, user_voice)
    elif user_language == "s":
        user_voice = "Lucia"
        language_code = "es-US" 
        play_text(user_text,language_code, user_voice)
    else:
        print(f"{user_language} is not a valid language. Please try again")
   

def play_text(user_text: str,language_code: str, user_voice: str ):
    session = boto3.Session(profile_name="pollyadmin")
    polly = session.client("polly")
    try:
        # Request speech synthesis
        response = polly.synthesize_speech(Text=user_text, OutputFormat="mp3",LanguageCode=language_code, VoiceId=user_voice)
    except (BotoCoreError, ClientError) as error:
        # The service returned an error, exit gracefully
        print(error)
        sys.exit(-1)

    # Access the audio stream from the response
    if "AudioStream" in response:
        with closing(response["AudioStream"]) as stream: # AudioStream: Stream containing the synthesized speech.
            # contextlib.closing(thing): Return a context manager that closes thing upon completion of the block.
            output = os.path.join(gettempdir(), "speech.mp3") # os.path.join(path, *paths): Join one or more path components
            try:
                # Open a file for writing the output as a binary stream
                with open(output, "wb") as file: # "w" - Write. "b" - Binary
                    file.write(stream.read())
            except IOError as error:
                # Could not write to file, exit gracefully
                print(error)
                sys.exit(-1)
    else:
        # The response didn't contain audio data, exit gracefully
        print("Could not stream audio")
        sys.exit(-1)
    
    # Play the audio using the platform's default player
    if sys.platform == "win32":
        os.startfile(output)
    else:
        # The following works on macOS and Linux. (Darwin = mac, xdg-open = linux).
        opener = "open" if sys.platform == "darwin" else "xdg-open"
        subprocess.call([opener, output]) # subprocess.call: we can run the command with the argument passed as a list of strings


if __name__ == '__main__':
    
"""
 *************** ADAM ***************
TASK 17
- Write a program that takes the text you have provided

and returns an audio file in the language specified. Have the code ask the user

if they would like to play the file. Use AWS services for this exercise.

Task 17 - polly
https://docs.aws.amazon.com/polly/latest/dg/get-started-what-next.html
"""

from boto3 import Session
from botocore.exceptions import BotoCoreError, ClientError
from contextlib import closing
import os
import sys
import subprocess


def polly_request_speech(intext: str, intlanguage: str):
    """ Request Polly speech given text and language."""
    session = Session(profile_name="default")
    polly = session.client("polly")
    try:
        response = polly.synthesize_speech(Text=intext,LanguageCode = intlanguage, OutputFormat="mp3", VoiceId="Joanna")
        print(response)
    except (BotoCoreError, ClientError) as error:
        print(error)
        sys.exit(1)
    return response


def polly_write_response(inresponse: object):
    """ Write the response of the Polly request. """
    if "AudioStream" in inresponse:
        with closing(inresponse["AudioStream"]) as stream:
            output = os.path.join(os.getcwd(), "speech.mp3")
            print(output)
            try:
                with open(output, "wb") as file:
                    file.write(stream.read())
            except IOError as error:
                print(error)
                sys.exit(1)
    else:
        print("Could not stream audio")
        sys.exit(1)

def get_user_text() -> str:
    try:
        intext = input("Which of your most favorite quotes can Polly cook up for you?")
    except:
        print("WTF")
    return intext

def get_user_language() -> str:
    languages = {
        "arabic":"arb",
        "chinese":"cmn-CN",
        "danish":"da-DK",
        "english":"en-GB",
        "french":"fr-FR",
        "german":"de-DE",
        "portuguese":"pl-PT",
        "spanish":"es-ES"
    }
    textlang = input("What language do you want to hear?")
    try:
        return languages[textlang.lower()]
    except KeyError as e:
        print("Enter a valid language.")
        sys.exit(1)

def main():
    requesttxt = get_user_text()
    requestlang = get_user_language()
    myspeech = polly_request_speech(requesttxt, requestlang)
    polly_write_response(myspeech)


if __name__ == "__main__":
    main()
    
    
    main()
